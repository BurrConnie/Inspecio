plugins {
	id 'fabric-loom' version '0.11.+'
	id 'io.github.juuxel.loom-quiltflower' version '1.6.0'
	id 'org.quiltmc.quilt-mappings-on-loom' version '4.0.0'
	id 'java-library'
	id 'maven-publish'
	id 'org.cadixdev.licenser' version '0.6.1'
	id 'com.modrinth.minotaur' version '1.2.+'
}

import com.google.gson.GsonBuilder
import com.google.gson.JsonObject
import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType
import com.modrinth.minotaur.responses.ResponseError
import org.apache.http.client.config.CookieSpecs
import org.apache.http.client.config.RequestConfig
import org.apache.http.client.entity.EntityBuilder
import org.apache.http.client.methods.HttpPatch
import org.apache.http.entity.ContentType
import org.apache.http.impl.client.HttpClientBuilder
import org.apache.http.util.EntityUtils

group = project.maven_group
version = "${project.mod_version}+${getMCVersionString()}"
archivesBaseName = project.archives_base_name

def targetJavaVersion = 17

boolean isMCVersionNonRelease() {
	return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$')
			|| project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getMCVersionString() {
	if (isMCVersionNonRelease()) {
		return project.minecraft_version
	}
	def version = project.minecraft_version.split('\\.')
	return version[0] + '.' + version[1]
}

String parseReadme() {
	def excludeRegex = /(?m)<!-- modrinth_exclude\.start -->(.|\n)*?<!-- modrinth_exclude\.end -->/
	def linkRegex = /!\[([A-z_ ]+)]\((images\/[A-z.\/_]+)\)/

	def readme = (String) file('README.md').text
	readme = readme.replaceAll(excludeRegex, '')
	readme = readme.replaceAll(linkRegex, '![$1](https://raw.githubusercontent.com/Queerbric/Inspecio/1.17/$2)')
	return readme
}

repositories {
	maven {
		name 'QuiltSnapshot'
		url 'https://maven.quiltmc.org/repository/snapshot'
		content {
			includeGroup 'org.quiltmc.fabric_api_qsl'
			includeGroupByRegex 'org.quiltmc.qsl(.[a-z_]+)?'
		}
	}
	maven {
		name 'TerraformersMC'
		url 'https://maven.terraformersmc.com/releases'
		content {
			includeGroup 'com.terraformersmc'
		}
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(loom.layered {
		addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:v2"))
	})
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "org.quiltmc.qsl.command:client_command:${project.qsl_client_command_version}+${getMCVersionString()}-SNAPSHOT"
	modImplementation "org.quiltmc.qsl.core:resource_loader:${project.qsl_resource_loader_version}+${getMCVersionString()}-SNAPSHOT"
	modImplementation "org.quiltmc.qsl.data:tags:${project.qsl_tags_version}+${getMCVersionString()}-SNAPSHOT"
	modImplementation "org.quiltmc.qsl.gui:tooltip:${project.qsl_tooltip_version}+${getMCVersionString()}-SNAPSHOT"

	// Only for ModMenu
	modLocalRuntime "org.quiltmc.fabric_api_qsl:fabric-resource-loader-v0:1.0.0+1.18-SNAPSHOT"
	modLocalRuntime "org.quiltmc.fabric_api_qsl:fabric-screen-api-v1:1.0.8+1.18-SNAPSHOT"
	modLocalRuntime("com.terraformersmc:modmenu:3.0.1") {
		transitive = false
	}
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'

	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

license {
	header file('HEADER')
	include '**/*.java'
}

task publishModrinth(type: TaskModrinthUpload) {
	dependsOn(build)
	onlyIf {
		System.getenv('MODRINTH_TOKEN')
	}

	token = System.getenv('MODRINTH_TOKEN')
	projectId = project.modrinth_id
	versionNumber = version
	versionName = "Inspecio ${project.mod_version} (${getMCVersionString()})"
	uploadFile = remapJar
	addGameVersion((String) project.minecraft_version)
	addLoader('fabric')
	versionType = isMCVersionNonRelease() ? VersionType.BETA : VersionType.RELEASE

	// Changelog fetching
	def changelogText = file('CHANGELOG.md').text
	def regexVersion = ((String) project.mod_version).replaceAll('\\.', /\\./).replaceAll('\\+', '\\+')
	def changelogRegex = ~"###? ${regexVersion}\\n\\n(( *- .+\\n)+)"
	def matcher = changelogText =~ changelogRegex

	if (matcher.find()) {
		changelog = matcher.group(1)

		def changelogLines = changelogText.split('\n')
		def linkRefRegex = ~'^\\[([A-z0-9 _\\-/+.]+)]: '
		for (int i = changelogLines.length - 1; i > 0; i--) {
			def line = changelogLines[i]
			if ((line =~ linkRefRegex).find())
				changelog += '\n' + line
			else break
		}
	}

	// Readme
	doFirst {
		final def client = HttpClientBuilder.create().setDefaultRequestConfig(RequestConfig.custom().setCookieSpec(CookieSpecs.IGNORE_COOKIES).build()).build()
		final def patch = new HttpPatch((String) (apiURL + '/v1/mod/' + projectId))
		patch.addHeader("Authorization", token)

		var json = new JsonObject()
		json.addProperty("body", parseReadme())
		patch.setEntity(EntityBuilder.create()
				.setText(json.toString())
				.setContentType(ContentType.APPLICATION_JSON)
				.build())

		final def response = client.execute(patch)
		final int status = response.getStatusLine().getStatusCode()

		final def gson = new GsonBuilder().create()
		if (status == 200) {
			project.getLogger().lifecycle("Successfully updated readme to ${projectId}.")
		} else {
			errorInfo = gson.fromJson(EntityUtils.toString(response.getEntity()), ResponseError.class)
			project.getLogger().error("Upload failed! Status: ${status} Error: ${errorInfo.getError()} Reason: ${errorInfo.getDescription()}")
			throw new GradleException("Upload failed! Status: ${status} Reason: ${errorInfo.getDescription()}")
		}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
	}
}